# app.py
# pip install streamlit telethon python-dotenv

import os
import re
import sys
import asyncio
from typing import Iterable, Optional, List, Dict
from collections import defaultdict

import streamlit as st
from telethon import TelegramClient, functions, types, errors
from dotenv import load_dotenv

# ---------- –∑–∞–≥—Ä—É–∑–∫–∞ .env ----------
load_dotenv()

# ---------- –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
PAGE = 100  # –ª–∏–º–∏—Ç Telegram –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
SESSION_FILE = "tg_topic_stats_session"  # —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ Telethon

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def coerce_int(v: str, name: str) -> int:
    if v is None or v == "":
        raise RuntimeError(f"{name} –Ω–µ –∑–∞–¥–∞–Ω")
    try:
        return int(v)
    except Exception:
        raise RuntimeError(f"{name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

def parse_topic_link(link: str):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
      https://t.me/c/3015720678/1152/1153
      https://t.me/c/3015720678/1152
      https://t.me/publicname/1152/1153
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (peer_hint, top_message_id)
    """
    m = re.search(r"https?://t\.me/(?:c/)?([^/]+)/(\d+)(?:/(\d+))?", link.strip())
    if not m:
        raise ValueError("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫—É. –î–∞–π –ø–æ–ª–Ω—ã–π URL –Ω–∞ –ø–æ—Å—Ç –≤ —Ç–æ–ø–∏–∫–µ.")
    group_part, first_num, _ = m.group(1), m.group(2), m.group(3)
    peer_hint = int("-100" + group_part) if group_part.isdigit() else group_part
    top_message_id = int(first_num)  # –∏–º–µ–Ω–Ω–æ –ü–ï–†–í–û–ï —á–∏—Å–ª–æ ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Ç–µ–º—ã
    return peer_hint, top_message_id

def _internal_c_id(peer_id: int) -> int:
    # -1001234567890 -> 1234567890
    raw = str(abs(peer_id))
    return int(raw[3:]) if raw.startswith("100") else int(raw)

async def build_message_link(client: TelegramClient, peer, msg_id: int, top_msg_id: Optional[int] = None) -> str:
    # 1) –ø—Ä–æ–±—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    try:
        resp = await client(functions.messages.ExportMessageLinkRequest(
            peer=peer, id=msg_id, grouped=False, thread=top_msg_id or 0
        ))
        if resp and getattr(resp, "link", None):
            return resp.link
    except Exception:
        pass
    # 2) —Å–æ–±–∏—Ä–∞–µ–º –≤—Ä—É—á–Ω—É—é
    username = getattr(peer, "username", None)
    if username:
        return f"https://t.me/{username}/{top_msg_id}/{msg_id}" if top_msg_id else f"https://t.me/{username}/{msg_id}"
    try:
        cid = _internal_c_id(peer.id)
        return f"https://t.me/c/{cid}/{top_msg_id}/{msg_id}" if top_msg_id else f"https://t.me/c/{cid}/{msg_id}"
    except Exception:
        return f"(msg id: {msg_id})"

def build_user_link(user) -> str:
    return f"https://t.me/{user.username}" if getattr(user, "username", None) else f"tg://user?id={user.id}"

async def fetch_topic_messages_via_replies(client: TelegramClient, peer, top_message_id: int) -> List[types.Message]:
    """
    –¢—è–Ω–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–º—ã —á–µ—Ä–µ–∑ messages.GetReplies –ø–æ ID —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    all_msgs: List[types.Message] = []
    offset_id = 0
    while True:
        resp = await client(functions.messages.GetRepliesRequest(
            peer=peer, msg_id=top_message_id, offset_id=offset_id,
            offset_date=None, add_offset=0, limit=PAGE, max_id=0, min_id=0, hash=0
        ))
        msgs = [m for m in resp.messages if isinstance(m, types.Message)]
        # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Ç–µ–º—ã
        msgs = [m for m in msgs if m.id != top_message_id]
        if not msgs:
            break
        all_msgs.extend(msgs)
        offset_id = msgs[-1].id
        if len(msgs) < PAGE:
            break
    return all_msgs

async def count_reactions_in_message(msg: types.Message, like_emojis: Optional[Iterable[str]]) -> int:
    """
    –ï—Å–ª–∏ like_emojis –ø—É—Å—Ç—ã–µ/None ‚Äî —Å—á–∏—Ç–∞–µ–º –ª—é–±—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ).
    –ò–Ω–∞—á–µ ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏.
    """
    if not getattr(msg, "reactions", None):
        return 0
    total = 0
    for r in msg.reactions.results:
        if isinstance(r.reaction, types.ReactionEmoji):
            if not like_emojis or r.reaction.emoticon in like_emojis:
                total += r.count
        else:
            # –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
            if not like_emojis:
                total += r.count
    return total

async def iter_reactors_for_message(client: TelegramClient, peer, message_id: int, like_emojis: Optional[Iterable[str]]):
    """
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ —é–∑–µ—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏.
    offset ‚Äî —Å—Ç—Ä–æ–∫–∞ –∏–∑ resp.next_offset.
    """
    offset = ""
    while True:
        resp = await client(functions.messages.GetMessageReactionsListRequest(
            peer=peer, id=message_id, reaction=None, offset=offset, limit=PAGE
        ))
        if not resp.reactions:
            break
        users_by_id = {u.id: u for u in resp.users}

        for item in resp.reactions:
            ok = False
            if isinstance(item.reaction, types.ReactionEmoji):
                ok = (not like_emojis) or (item.reaction.emoticon in like_emojis)
            else:
                ok = not like_emojis  # –∫–∞—Å—Ç–æ–º —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞

            if ok:
                uid = getattr(item.peer_id, "user_id", None)
                if uid in users_by_id:
                    yield users_by_id[uid]

        if not resp.next_offset:
            break
        offset = resp.next_offset

async def analyze_topic(topic_link: str, top_n: int, like_emojis: Optional[set],
                        api_id: int, api_hash: str) -> Dict:
    # Windows loop fix
    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    client = TelegramClient(SESSION_FILE, api_id, api_hash)
    await client.connect()
    if not await client.is_user_authorized():
        await client.disconnect()
        return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ —Å–∞–π–¥–±–∞—Ä–µ."}

    peer_hint, top_msg_id = parse_topic_link(topic_link)
    peer = await client.get_entity(peer_hint)

    # sanity
    top_msg = await client.get_messages(peer, ids=top_msg_id)
    if not top_msg:
        await client.disconnect()
        return {"error": "–ù–µ –≤–∏–∂—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏ –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏."}

    msgs = await fetch_topic_messages_via_replies(client, peer, top_msg_id)

    likes_by_msg: Dict[int, int] = {}
    for m in msgs:
        likes_by_msg[m.id] = await count_reactions_in_message(m, like_emojis)

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ç–æ–ø
    top_msgs = sorted(msgs, key=lambda m: (-likes_by_msg.get(m.id, 0), -m.id))[:top_n]

    # —Å—Ç—Ä–æ–∏–º —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ–≤—å—é
    top_rows = []
    rank = 1
    for m in top_msgs:
        link = await build_message_link(client, peer, m.id, top_msg_id)
        preview = (m.message or "").strip().replace("\n", " ")
        if len(preview) > 140:
            preview = preview[:137] + "..."
        top_rows.append({
            "rank": rank,
            "reactions": likes_by_msg[m.id],
            "link": link,
            "text": preview
        })
        rank += 1

    # —Ç–æ–ø-—Ä–µ–∞–∫—Ç–æ—Ä
    liker_counter = defaultdict(int)
    liker_name = {}

    for m in msgs:
        if getattr(m, "reactions", None):
            async for user in iter_reactors_for_message(client, peer, m.id, like_emojis):
                liker_counter[user.id] += 1
                if user.id not in liker_name:
                    name = (user.first_name or "") + (" " + user.last_name if user.last_name else "")
                    name = name.strip() or ("@" + user.username if user.username else f"user_{user.id}")
                    liker_name[user.id] = name

    top_liker = None
    if liker_counter:
        top_liker_id, top_likes = max(liker_counter.items(), key=lambda kv: kv[1])
        top_user = await client.get_entity(top_liker_id)
        top_liker = {
            "name": liker_name.get(top_liker_id, top_liker_id),
            "profile": build_user_link(top_user),
            "count": top_likes
        }

    await client.disconnect()
    return {"top": top_rows, "top_liker": top_liker, "total_msgs": len(msgs)}

# ---------- UI ----------
st.set_page_config(page_title="Telegram Topic Stats", page_icon="üî•", layout="centered")
st.title("Telegram Topic Stats")
st.caption("–°—á–∏—Ç–∞–µ–º –º–µ–º—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏. –ë–µ–∑ —Å–ø–∞–º–∞, –±–µ–∑ –±–∞–Ω–æ–≤, —Ç–æ–ª—å–∫–æ data vibes.")

# ---------- AUTH SIDEBAR ----------
with st.sidebar:
    st.subheader("Auth")

    api_id = st.text_input("TG_API_ID", value=os.getenv("TG_API_ID", ""))
    api_hash = st.text_input("TG_API_HASH", value=os.getenv("TG_API_HASH", ""))
    phone = st.text_input("TG_PHONE (–¥–ª—è –ª–æ–≥–∏–Ω–∞)", value=os.getenv("TG_PHONE", ""))

    # session state
    if "tg_code_hash" not in st.session_state:
        st.session_state.tg_code_hash = None
    if "tg_phone" not in st.session_state:
        st.session_state.tg_phone = None
    if "tg_authorized" not in st.session_state:
        st.session_state.tg_authorized = False
    if "tg_need_2fa" not in st.session_state:
        st.session_state.tg_need_2fa = False

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
    if st.button("Send code"):
        try:
            if not api_id or not api_hash or not phone:
                st.warning("–ù—É–∂–Ω—ã TG_API_ID, TG_API_HASH –∏ TG_PHONE.")
            else:
                async def _send_code():
                    client = TelegramClient(SESSION_FILE, int(api_id), api_hash)
                    await client.connect()
                    if await client.is_user_authorized():
                        st.session_state.tg_authorized = True
                        await client.disconnect()
                        return
                    res = await client.send_code_request(phone)
                    st.session_state.tg_code_hash = res.phone_code_hash
                    st.session_state.tg_phone = phone
                    await client.disconnect()

                asyncio.run(_send_code())
                st.success("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram. –í–≤–µ–¥–∏ –µ–≥–æ –Ω–∏–∂–µ.")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥: {e}")

    # –í–≤–æ–¥ –∫–æ–¥–∞
    if st.session_state.tg_code_hash and not st.session_state.tg_authorized and not st.session_state.tg_need_2fa:
        code = st.text_input("Code –∏–∑ Telegram", value="", max_chars=6)
        if st.button("Verify"):
            try:
                async def _verify():
                    client = TelegramClient(SESSION_FILE, int(api_id), api_hash)
                    await client.connect()
                    try:
                        await client.sign_in(
                            phone=st.session_state.tg_phone,
                            code=code,
                            phone_code_hash=st.session_state.tg_code_hash
                        )
                        st.session_state.tg_authorized = True
                    except errors.SessionPasswordNeededError:
                        st.session_state.tg_need_2fa = True
                    finally:
                        await client.disconnect()

                asyncio.run(_verify())
                if st.session_state.tg_authorized:
                    st.success("–£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏. –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                elif st.session_state.tg_need_2fa:
                    st.info("–í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –Ω–∏–∂–µ.")
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥: {e}")

    # 2FA –ø–∞—Ä–æ–ª—å
    if st.session_state.tg_need_2fa and not st.session_state.tg_authorized:
        twofa = st.text_input("2FA –ø–∞—Ä–æ–ª—å", type="password")
        if st.button("Verify 2FA"):
            try:
                async def _verify_2fa():
                    client = TelegramClient(SESSION_FILE, int(api_id), api_hash)
                    await client.connect()
                    await client.sign_in(password=twofa)
                    st.session_state.tg_authorized = True
                    await client.disconnect()

                asyncio.run(_verify_2fa())
                st.success("–õ–æ–≥–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω. –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ 2FA: {e}")

    # Logout
    if st.session_state.tg_authorized:
        st.caption("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–∫ ‚úÖ")
        if st.button("Log out (—É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é)"):
            try:
                for fn in os.listdir("."):
                    if fn.startswith(SESSION_FILE):
                        os.remove(fn)
                st.session_state.update({
                    "tg_code_hash": None, "tg_phone": None,
                    "tg_authorized": False, "tg_need_2fa": False
                })
                st.success("–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞.")
            except Exception as e:
                st.error(f"–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")

# ---------- MAIN FORM ----------
st.write("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `https://t.me/c/3015720678/1152/1153`")
topic_link = st.text_input("Topic link", value="", placeholder="https://t.me/c/<internal>/<top_msg_id>/<msg_id>")

col1, col2 = st.columns(2)
with col1:
    top_n = st.number_input("Top-N –º–µ–º–æ–≤", min_value=1, max_value=50, value=3, step=1)
with col2:
    emojis_raw = st.text_input("–§–∏–ª—å—Ç—Ä —ç–º–æ–¥–∑–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –ª—é–±—ã–µ —Ä–µ–∞–∫—Ü–∏–∏.", value="")

go = st.button("–ü–æ—Å—á–∏—Ç–∞—Ç—å", type="primary")

if go:
    try:
        if not st.session_state.tg_authorized:
            st.error("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ —Å–∞–π–¥–±–∞—Ä–µ: Send code ‚Üí Verify (–∏ 2FA, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).")
            st.stop()

        api_id_int = coerce_int(api_id, "TG_API_ID")
        like_emojis: Optional[set] = None
        if emojis_raw.strip():
            like_emojis = {e.strip() for e in emojis_raw.split(",") if e.strip()}

        with st.spinner("–°—á–∏—Ç–∞—é... –Ω–µ –¥–µ—Ä–≥–∞–π Telegram, –æ–Ω –Ω–µ—Ä–≤–Ω—ã–π."):
            result = asyncio.run(analyze_topic(
                topic_link=topic_link.strip(),
                top_n=int(top_n),
                like_emojis=like_emojis,
                api_id=api_id_int,
                api_hash=api_hash.strip(),
            ))

        if "error" in result:
            st.error(result["error"])
        else:
            st.success(f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–µ: {result['total_msgs']}")

            top = result["top"]
            if not top:
                st.warning("–¢–æ–ø –ø—É—Å—Ç. –õ–∏–±–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ—Ç, –ª–∏–±–æ —Ç–µ–º–∞ —Ç–∞–∫–∞—è –∂–µ –∂–∏–≤–∞—è, –∫–∞–∫ –¥–µ–º–æ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º.")
            else:
                import pandas as pd
                df = pd.DataFrame(top)[["rank", "reactions", "link", "text"]]
                df["link"] = df["link"].apply(lambda x: f"[open]({x})")
                st.markdown("### Top –º–µ–º—ã")
                st.dataframe(df, use_container_width=True)

            if result["top_liker"]:
                tl = result["top_liker"]
                st.markdown("### –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∞–π–∫–µ—Ä")
                st.markdown(f"**{tl['name']}** ‚Äî {tl['count']} —Ä–µ–∞–∫—Ü–∏–π  ‚Ä¢  [–ø—Ä–æ—Ñ–∏–ª—å]({tl['profile']})")
            else:
                st.info("–°–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∞–π–∫–µ—Ä–∞ –Ω–µ—Ç. –í–∏–¥–∏–º–æ, –≤—Å–µ –±–µ—Ä–µ–≥—É—Ç –ø–∞–ª–µ—Ü –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")
        st.stop()

st.markdown("---")
st.caption("P.S. –ö–ª—é—á–∏ –Ω–µ –ø–∞–ª–∏–º, ToS –Ω–µ –ª–æ–º–∞–µ–º. –ê–≤—Ç–æ—Å–ø–∞–º –Ω–µ –≤–∫–ª—é—á–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—á–µ–Ω—å —á–µ—à–µ—Ç—Å—è.")

